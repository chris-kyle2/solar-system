name: Solar-system-workflow

on:
    workflow_dispatch:
    push:
      branches:
        - main
      paths-ignore:
        - '.github/workflows/infrastructure-setup.yml'
        - 'kubernetes/**'
        - 'mongodb-connect.js'

env:
  MONGO_URI: 'mongodb://localhost:27017/testdb'
  MONGO_USER: ${{ vars.MONGO_USER }}
  MONGO_PASS: ${{ secrets.MONGO_PASS }}

  
jobs:
    unit-testing:
        name: Unit Testing
        strategy:
            matrix:
                node-version: [18]
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install

            - name: Wait for MongoDB to be Ready
              run: sleep 20

            - name: Run Database Initialization Script
              run: node initDB.js

            - name: Run Unit Tests
              run: npm test
            - name: Archive test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: test-results-${{ github.run_id }}
                path: test-results.xml
    Code-Coverage:
        name: Code Coverage
        services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            - name: Setup Nodejs 18
              uses: actions/setup-node@v4
              with: 
                node-version: 18

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
                
                
            - name: Install Dependencies
              run: npm install
            - name: Wait for MongoDB to be Ready
              run: sleep 20
            - name: Run Database Initialization Script
              run: node initDB.js
            - name: Run Code Coverage
              run: npm run coverage
            - name: Archive Coverage Report
              if: always()
              uses: actions/upload-artifact@v4

              with:
                name: coverage-${{ github.run_id }}
                path: coverage
                retention-days: 1


    Upload-reports-to-s3:
      name: Upload reports to s3
      needs: [unit-testing, Code-Coverage]
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Download Unit-testing reports
          uses: actions/download-artifact@v4
          with:
            name: test-results-${{ github.run_id }}
            path: test-results.xml
        - name: Download Code-Coverage reports
          uses: actions/download-artifact@v4
          with:
            name: coverage-${{ github.run_id }}
            path: coverage
        - name: Upload Unit-testing reports to s3
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --acl public-read --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.UNIT_TESTING_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.REGION }}  
            SOURCE_DIR: test-results-${{ github.run_id }}
        - name: Upload Code-Coverage reports to s3
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --acl public-read --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.CODE_COVERAGE_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.REGION }}  
            SOURCE_DIR: coverage-${{ github.run_id }}
        
    Docker:
        name: login-docker
        needs: [unit-testing, Code-Coverage]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            - name: Login to Docker Hub
              uses: docker/login-action@v2.2.0
              with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Build Docker Image
              run: |
                  docker build --no-cache -t ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }} -f Dockerfile .
            - name: Push Docker Image
              env:
                    DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
                    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
              run: |
                    echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                    docker push ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                  
            - name: Check & Create Docker Network
              run: |
                  echo "Checking if network 'solar-net' exists..."
                  docker network ls | grep "solar-net" && echo "Network exists" || docker network create solar-net
  
            - name: Create Docker Volume for Environment Variables
              run: docker volume create solar-system-env
  
            - name: Store Environment Variables in Volume
              run: |
                  docker run -v solar-system-env:/mnt --rm busybox sh -c 'echo "MONGO_URI=mongodb://appuser:apppassword@mongo:27017/solar-system-db?authSource=solar-system-db" > /mnt/env_vars'
            - name: Verify Volume Content
              run: |
                  echo "Checking if environment variables are stored correctly in the volume..."
                  docker run -v solar-system-env:/mnt --rm busybox sh -c "ls -la /mnt && cat /mnt/env_vars"

            - name: Start MongoDB Container with Authentication
              run: |
                  echo "Starting MongoDB container with authentication..."
                  docker run -d --name=mongo --network=solar-net \
                      -p 27017:27017 \
                      -e MONGO_INITDB_ROOT_USERNAME=admin \
                      -e MONGO_INITDB_ROOT_PASSWORD=adminpassword \
                      -e MONGO_INITDB_DATABASE=solar-system-db \
                      mongo:latest
                  sleep 20
                  echo "MongoDB is now running with authentication."
  
            - name: Create MongoDB Application User
              run: |
                  echo "Creating MongoDB application user..."
                  docker exec -i mongo mongosh --username admin --password adminpassword --authenticationDatabase admin <<EOF
                  use solar-system-db;
                  db.createUser({
                    user: "appuser",
                    pwd: "apppassword",
                    roles: [{ role: "readWrite", db: "solar-system-db" }]
                  });
                  EOF
                  echo "MongoDB application user created."
  
            - name: Run Database Initialization
              run: |
                  echo "Initializing MongoDB with initDB.js..."
                  docker run --rm --network=solar-net \
                    -v ${{ github.workspace }}:/app \
                    -w /app node:18 bash -c "npm install && MONGO_URI='mongodb://appuser:apppassword@mongo:27017/solar-system-db?authSource=solar-system-db' node initDB.js"
  
            - name: List Docker Images
              run: |
                  echo "Listing available Docker images..."
                  docker image ls
  
            - name: Start Solar System Container
              run: |
                   echo "Pulling the latest image..."
                   IMAGE_NAME="${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}"
                   echo "Removing any old image versions..."
                   docker image prune -f
                
                   docker pull $IMAGE_NAME
                   echo "Running container using image: $IMAGE_NAME"
                
                   docker run -d --name=solar-system --network=solar-net \
                   -p 3000:3000 -v solar-system-env:/mnt \
                   $IMAGE_NAME
                
                   echo "Checking container logs..."
                   if ! docker logs solar-system; then
                       echo "Warning: Failed to retrieve logs!"
                   fi
  
            - name: Wait for Application to Start
              run: |
                    echo "Waiting for the application to be ready..."
                    for i in {1..10}; do
                       sleep 3
                       docker ps | grep solar-system && echo "Application is running!" && break
                       echo "Retrying... ($i/10)"
                    done
  
            
  
            - name: Perform Health Checks
              run: |
                      echo "Performing health checks on solar-system container..."    
                      curl -X GET http://localhost:3000/live || (echo "Health check failed!" && exit 1)
                      curl -X GET http://localhost:3000/ready || (echo "Readiness check failed!" && exit 1)
                      curl -X GET http://localhost:3000/os || (echo "OS endpoint check failed!" && exit 1)
    # ghcr-login:
    #   name: ghcr-login
    #   needs: [Docker]
    #   permissions:
    #     contents: write
    #     packages: write
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Checkout Code
    #       uses: actions/checkout@v4
    #     - name: ghcr-login
    #       uses: docker/login-action@v2.2.0
    #       with:
    #         registry: ghcr.io
    #         username: ${{ github.repository_owner }}
    #         password: ${{ secrets.GITHUB_TOKEN }}
    #     - name: Push Docker Image to GHCR
    #       uses: docker/build-push-action@v4
    #       with:
    #         context: .
    #         file: Dockerfile
    #         push: true
    #         tags: |
    #           ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
    
    Dev-Environment-Deploy:
        name: deploy-to dev cluster
        if: contains(github.ref, 'refs/heads/main') || contains(github.ref, '/feature/')
        needs: [Docker]
        environment:
          name: development
          url: http://${{ steps.app-ingress-host.outputs.APP_INGRESS_HOST }}
        outputs:
          APP_INGRESS_HOST: ${{ steps.app-ingress-host.outputs.APP_INGRESS_HOST }}
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v4

          - name: List Files
            run: |
              ls -la
              ls -la kubernetes/development/

          - name: Install Kubectl CLI
            uses: azure/setup-kubectl@v3
            with:
              version: 'v1.26.0'

          - name: Adding Context to kubectl
            uses: azure/k8s-set-context@v3
            with:
              method: kubeconfig
              kubeconfig: ${{ secrets.KUBECONFIG }}

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1
              role-skip-session-tagging: true

          - name: Fetch Dev Cluster Details
            run: |
              echo "Fetching dev cluster details..."
              kubectl version
              kubectl get nodes -o wide
              kubectl get svc
              kubectl get pods -o wide

          - name: Create Namespace
            run: |
              kubectl create namespace ${{ vars.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          - name: Create MongoDB Secret (Before Deployment)
            run: |
                echo "Checking if MongoDB secret already exists..."
                if kubectl -n ${{ vars.NAMESPACE }} get secret mongo-db-creds >/dev/null 2>&1; then
                    echo "MongoDB secret already exists. Skipping creation."
                else
                    echo "Creating MongoDB Atlas secret..."
                    kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
                      --from-literal=MONGO_URI=${{ secrets.MONGO_ATLAS_URI }} \
                      --dry-run=client -o yaml | kubectl apply -f -
                fi
              

          - name: Verify MongoDB Secret
            run: |
              echo "Verifying if MongoDB secret exists..."
              kubectl get secret mongo-db-creds -n ${{ vars.NAMESPACE }}

          - name: Replace Tokens in Manifest Files
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: kubernetes/development/*.yaml
            env:
              NAMESPACE: ${{ vars.NAMESPACE }}
              IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
              REPLICAS: ${{ vars.REPLICAS }}

          - name: Deploy App Services (Without Ingress)
            run: |
              kubectl apply -f kubernetes/development/ --selector='component!=ingress'

          - name: Wait for Services to Start
            run: |
              echo "Waiting for services to be ready..."
              kubectl rollout status deployment solar-system -n ${{ vars.NAMESPACE }} --timeout=120s



          - name: Wait for a few seconds
            run: |
              sleep 20  # Adjust as needed for ALB provisioning

          - name: Get ALB DNS Name
            id: alb-dns
            run: |
              echo "ALB_DNS=$(kubectl get ingress solar-system -n ${{ vars.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> "$GITHUB_ENV"
              echo "ALB DNS: $ALB_DNS"
            
          - name: Check Ingress File Before Token Replacement
            run: |
                cat kubernetes/development/ingress.yaml

          - name: Replace ALB DNS in Ingress File
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: kubernetes/development/ingress.yaml
            env:
              ALB_DNS: ${{ env.ALB_DNS }}
              
          - name: Check Ingress File After Token Replacement
            run: |
                echo "After replacement:"
                cat kubernetes/development/ingress.yaml

          - name: Check Updated Manifest Files
            run: |
              cat kubernetes/development/*.yaml

          - name: Final Deployment with ALB DNS
            run: |
                kubectl apply -f kubernetes/development/ingress.yaml
          - name: Set App ingress Host URL
            id: app-ingress-host
            run: |
              echo "APP_INGRESS_HOST=$(kubectl get ingress solar-system -n ${{ vars.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> "$GITHUB_OUTPUT"
              


    Dev-Integration-testing:
        name: Dev Integration testing
        if: contains(github.ref, 'refs/heads/main') || contains(github.ref, '/feature/')
        needs: [Dev-Environment-Deploy]
        runs-on: ubuntu-latest
        steps:
          - name: Test Url Using Curl and JQ
            env:
              URL: ${{ needs.Dev-Environment-Deploy.outputs.APP_INGRESS_HOST }}
            run: |
              curl -s http://${{ env.URL }}/live -k | jq .
    
    Prod-Environment-Deploy:
        name: deploy-to prod cluster
        if: contains(github.ref, 'refs/heads/main')
        needs: [Docker]
        environment:
          name: production
          url: http://${{ steps.app-ingress-host.outputs.APP_INGRESS_HOST }}
        outputs:
          APP_INGRESS_HOST: ${{ steps.app-ingress-host.outputs.APP_INGRESS_HOST }}
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v4

          - name: List Files
            run: |
              ls -la
              ls -la kubernetes/development/

          - name: Install Kubectl CLI
            uses: azure/setup-kubectl@v3
            with:
              version: 'v1.26.0'

          - name: Adding Context to kubectl
            uses: azure/k8s-set-context@v3
            with:
              method: kubeconfig
              kubeconfig: ${{ secrets.KUBECONFIG }}

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1
              role-skip-session-tagging: true

          - name: Fetch Prod Cluster Details
            run: |
              echo "Fetching prod cluster details..."
              kubectl version
              kubectl get nodes -o wide
              kubectl get svc
              kubectl get pods -o wide

          - name: Create Namespace
            run: |
              kubectl create namespace ${{ vars.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          - name: Create MongoDB Secret (Before Deployment)
            run: |
                echo "Checking if MongoDB secret already exists..."
                if kubectl -n ${{ vars.NAMESPACE }} get secret mongo-db-creds >/dev/null 2>&1; then
                    echo "MongoDB secret already exists. Skipping creation."
                else
                    echo "Creating MongoDB Atlas secret..."
                    kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
                      --from-literal=MONGO_URI=${{ secrets.MONGO_ATLAS_URI }} \
                      --dry-run=client -o yaml | kubectl apply -f -
                fi
              

          - name: Verify MongoDB Secret
            run: |
              echo "Verifying if MongoDB secret exists..."
              kubectl get secret mongo-db-creds -n ${{ vars.NAMESPACE }}

          - name: Replace Tokens in Manifest Files
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: kubernetes/production/*.yaml
            env:
              NAMESPACE: ${{ vars.NAMESPACE }}
              IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
              REPLICAS: ${{ vars.REPLICAS }}

          - name: Deploy App Services (Without Ingress)
            run: |
              kubectl apply -f kubernetes/production/ --selector='component!=ingress'

          - name: Wait for Services to Start
            run: |
              echo "Waiting for services to be ready..."
              kubectl rollout status deployment solar-system -n ${{ vars.NAMESPACE }} --timeout=120s



          - name: Wait for a few seconds
            run: |
              sleep 20  # Adjust as needed for ALB provisioning

          - name: Get ALB DNS Name
            id: alb-dns
            run: |
              echo "ALB_DNS=$(kubectl get ingress solar-system -n ${{ vars.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> "$GITHUB_ENV"
              echo "ALB DNS: $ALB_DNS"
            
          - name: Check Ingress File Before Token Replacement
            run: |
                cat kubernetes/production/ingress.yaml

          - name: Replace ALB DNS in Ingress File
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: kubernetes/production/ingress.yaml
            env:
              ALB_DNS: ${{ env.ALB_DNS }}
              
          - name: Check Ingress File After Token Replacement
            run: |
                echo "After replacement:"
                cat kubernetes/production/ingress.yaml

          - name: Check Updated Manifest Files
            run: |
              cat kubernetes/production/*.yaml

          - name: Final Deployment with ALB DNS
            run: |
                kubectl apply -f kubernetes/production/ingress.yaml
          - name: Set App ingress Host URL
            id: app-ingress-host
            run: |
              echo "APP_INGRESS_HOST=$(kubectl get ingress solar-system -n ${{ vars.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> "$GITHUB_OUTPUT"
              


    Prod-Integration-testing:
        name: Prod Integration testing
        if: contains(github.ref, 'refs/heads/main')
        needs: [Prod-Environment-Deploy]
        runs-on: ubuntu-latest
        steps:
          - name: Test Url Using Curl and JQ
            env:
              URL: ${{ needs.Prod-Environment-Deploy.outputs.APP_INGRESS_HOST }}
            run: |
              curl -s http://${{ env.URL }}/live -k | jq .
















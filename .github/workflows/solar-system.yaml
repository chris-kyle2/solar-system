name: Solar-system-workflow

on:
    workflow_dispatch:
    push:
        branches:
            - main

env:
  MONGO_URI: 'mongodb://localhost:27017/testdb'

jobs:
    unit-testing:
        name: Unit Testing
        strategy:
            matrix:
                node-version: [18]
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install

            - name: Wait for MongoDB to be Ready
              run: sleep 20

            - name: Run Database Initialization Script
              run: node initDB.js

            - name: Run Unit Tests
              run: npm test
            - name: Archive test results
              uses: actions/upload-artifact@v4
              with:
                name: test-results-${{ github.run_id }}
                path: test-results.xml
    Code-Coverage:
        name: Code Coverage
        services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            - name: Setup Nodejs 18
              uses: actions/setup-node@v4
              with: 
                node-version: 18

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
                
                
            - name: Install Dependencies
              run: npm install
            - name: Wait for MongoDB to be Ready
              run: sleep 20
            - name: Run Database Initialization Script
              run: node initDB.js
            - name: Run Code Coverage
              run: npm run coverage
            - name: Archive Coverage Report
              uses: actions/upload-artifact@v4
              with:
                name: coverage-${{ github.run_id }}
                path: coverage
                retention-days: 1
    Docker:
        name: login-docker
        needs: [unit-testing, Code-Coverage]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            - name: Login to Docker Hub
              uses: docker/login-action@v2.2.0
              with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Build Docker Image
              uses: docker/build-push-action@v4
              with:
                context: .
                file: Dockerfile
                push: true
                tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{github.sha}}
            
            - name: Check & Create Docker Network
              run: |
                  echo "Checking if network 'solar-net' exists..."
                  docker network ls | grep "solar-net" && echo "Network exists" || docker network create solar-net
  
            - name: Create Docker Volume for Environment Variables
              run: docker volume create solar-system-env
  
            - name: Store Environment Variables in Volume
              run: |
                  docker run -v solar-system-env:/mnt --rm busybox sh -c 'echo "MONGO_URI=mongodb://appuser:apppassword@mongo:27017/solar-system-db?authSource=solar-system-db" > /mnt/env_vars'
  
            - name: Start MongoDB Container with Authentication
              run: |
                  echo "Starting MongoDB container with authentication..."
                  docker run -d --name=mongo --network=solar-net \
                      -p 27017:27017 \
                      -e MONGO_INITDB_ROOT_USERNAME=admin \
                      -e MONGO_INITDB_ROOT_PASSWORD=adminpassword \
                      -e MONGO_INITDB_DATABASE=solar-system-db \
                      mongo:latest
                  sleep 20
                  echo "MongoDB is now running with authentication."
  
            - name: Create MongoDB Application User
              run: |
                  echo "Creating MongoDB application user..."
                  docker exec -i mongo mongosh --username admin --password adminpassword --authenticationDatabase admin <<EOF
                  use solar-system-db;
                  db.createUser({
                    user: "appuser",
                    pwd: "apppassword",
                    roles: [{ role: "readWrite", db: "solar-system-db" }]
                  });
                  EOF
                  echo "MongoDB application user created."
  
            - name: Run Database Initialization
              run: |
                  echo "Initializing MongoDB with initDB.js..."
                  docker run --rm --network=solar-net \
                    -v ${{ github.workspace }}:/app \
                    -w /app node:18 bash -c "npm install && MONGO_URI='mongodb://appuser:apppassword@mongo:27017/solar-system-db?authSource=solar-system-db' node initDB.js"
  
            - name: List Docker Images
              run: |
                  echo "Listing available Docker images..."
                  docker image ls
  
            - name: Start Solar System Container
              run: |
                   echo "Pulling the latest image..."
                   IMAGE_NAME="${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}"
                   echo "Removing any old image versions..."
                   docker image prune -f
                
                   docker pull $IMAGE_NAME
                   echo "Running container using image: $IMAGE_NAME"
                
                   docker run -d --name=solar-system --network=solar-net \
                   -p 3000:3000 -v solar-system-env:/mnt \
                   --env-file /mnt/env_vars \
                   $IMAGE_NAME
                
                   echo "Checking container logs..."
                   if ! docker logs solar-system; then
                       echo "Warning: Failed to retrieve logs!"
                   fi
  
            - name: Wait for Application to Start
              run: |
                    echo "Waiting for the application to be ready..."
                    for i in {1..10}; do
                       sleep 3
                       docker ps | grep solar-system && echo "Application is running!" && break
                       echo "Retrying... ($i/10)"
                    done
  
            - name: Fetch Application Container IP
              run: |
                    echo "Retrieving solar-system container IP..."
                    export IP=$(docker inspect -f '{{range.NetworkSettings.Networks.solar-net}}{{.IPAddress}}{{end}}' solar-system)
                    
                    if [[ -z "$IP" ]]; then
                        echo "Failed to get container IP. Dumping container details:"
                        docker inspect solar-system
                        exit 1
                    fi
                    
                    echo "Application IP: $IP"
                    echo "IP=$IP" >> $GITHUB_ENV
  
            - name: Perform Health Checks
              run: |
                    echo "Performing health checks on solar-system container..."
                    
                    if ! curl -X GET http://${{ env.IP }}:3000/live; then
                        echo "Health check failed! Dumping logs:"
                        docker logs solar-system
                        exit 1
                    fi
                  
                    if ! curl -X GET http://${{ env.IP }}:3000/ready; then
                        echo "Readiness check failed! Dumping logs:"
                        docker logs solar-system
                        exit 1
                    fi
                  
                    if ! curl -X GET http://${{ env.IP }}:3000/os; then
                        echo "OS endpoint check failed! Dumping logs:"
                        docker logs solar-system
                        exit 1
                    fi
  
            - name: Cleanup Docker Containers & Network
              run: |
                    echo "Cleaning up resources..."
                    docker rm -f solar-system
                    docker rm -f mongo
                    docker network rm solar-net
                    docker volume rm solar-system-env
                    echo "Cleanup completed."
  
            - name: Remove Docker Image
              run: |
                    echo "Removing Docker image..."
                    docker rmi ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }} || echo "Image removal failed, but continuing..."
  
name: Solar-system-workflow

on:
    workflow_dispatch:
    push:
      branches:
        - main
      paths-ignore:
        - '.github/workflows/infrastructure-setup.yml'
        - 'kubernetes/**'
        - 'mongodb-connect.js'

env:
  MONGO_URI: 'mongodb://localhost:27017/testdb'
  MONGO_USER: ${{ vars.MONGO_USER }}
  MONGO_PASS: ${{ secrets.MONGO_PASS }}

jobs:
    unit-testing:
        name: Unit Testing
        strategy:
            matrix:
                node-version: [18]
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install

            - name: Wait for MongoDB to be Ready
              run: sleep 20

            - name: Run Database Initialization Script
              run: node initDB.js

            - name: Run Unit Tests
              run: npm test
            - name: Archive test results
              uses: actions/upload-artifact@v4
              with:
                name: test-results-${{ github.run_id }}
                path: test-results.xml
    Code-Coverage:
        name: Code Coverage
        services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            - name: Setup Nodejs 18
              uses: actions/setup-node@v4
              with: 
                node-version: 18

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
                
                
            - name: Install Dependencies
              run: npm install
            - name: Wait for MongoDB to be Ready
              run: sleep 20
            - name: Run Database Initialization Script
              run: node initDB.js
            - name: Run Code Coverage
              run: npm run coverage
            - name: Archive Coverage Report
              uses: actions/upload-artifact@v4
              with:
                name: coverage-${{ github.run_id }}
                path: coverage
                retention-days: 1
    Docker:
        name: login-docker
        needs: [unit-testing, Code-Coverage]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            - name: Login to Docker Hub
              uses: docker/login-action@v2.2.0
              with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Build Docker Image
              run: |
                  docker build --no-cache -t ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }} -f Dockerfile .
            - name: Push Docker Image
              env:
                    DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
                    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
              run: |
                    echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                    docker push ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                  
            - name: Check & Create Docker Network
              run: |
                  echo "Checking if network 'solar-net' exists..."
                  docker network ls | grep "solar-net" && echo "Network exists" || docker network create solar-net
  
            - name: Create Docker Volume for Environment Variables
              run: docker volume create solar-system-env
  
            - name: Store Environment Variables in Volume
              run: |
                  docker run -v solar-system-env:/mnt --rm busybox sh -c 'echo "MONGO_URI=mongodb://appuser:apppassword@mongo:27017/solar-system-db?authSource=solar-system-db" > /mnt/env_vars'
            - name: Verify Volume Content
              run: |
                  echo "Checking if environment variables are stored correctly in the volume..."
                  docker run -v solar-system-env:/mnt --rm busybox sh -c "ls -la /mnt && cat /mnt/env_vars"

            - name: Start MongoDB Container with Authentication
              run: |
                  echo "Starting MongoDB container with authentication..."
                  docker run -d --name=mongo --network=solar-net \
                      -p 27017:27017 \
                      -e MONGO_INITDB_ROOT_USERNAME=admin \
                      -e MONGO_INITDB_ROOT_PASSWORD=adminpassword \
                      -e MONGO_INITDB_DATABASE=solar-system-db \
                      mongo:latest
                  sleep 20
                  echo "MongoDB is now running with authentication."
  
            - name: Create MongoDB Application User
              run: |
                  echo "Creating MongoDB application user..."
                  docker exec -i mongo mongosh --username admin --password adminpassword --authenticationDatabase admin <<EOF
                  use solar-system-db;
                  db.createUser({
                    user: "appuser",
                    pwd: "apppassword",
                    roles: [{ role: "readWrite", db: "solar-system-db" }]
                  });
                  EOF
                  echo "MongoDB application user created."
  
            - name: Run Database Initialization
              run: |
                  echo "Initializing MongoDB with initDB.js..."
                  docker run --rm --network=solar-net \
                    -v ${{ github.workspace }}:/app \
                    -w /app node:18 bash -c "npm install && MONGO_URI='mongodb://appuser:apppassword@mongo:27017/solar-system-db?authSource=solar-system-db' node initDB.js"
  
            - name: List Docker Images
              run: |
                  echo "Listing available Docker images..."
                  docker image ls
  
            - name: Start Solar System Container
              run: |
                   echo "Pulling the latest image..."
                   IMAGE_NAME="${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}"
                   echo "Removing any old image versions..."
                   docker image prune -f
                
                   docker pull $IMAGE_NAME
                   echo "Running container using image: $IMAGE_NAME"
                
                   docker run -d --name=solar-system --network=solar-net \
                   -p 3000:3000 -v solar-system-env:/mnt \
                   $IMAGE_NAME
                
                   echo "Checking container logs..."
                   if ! docker logs solar-system; then
                       echo "Warning: Failed to retrieve logs!"
                   fi
  
            - name: Wait for Application to Start
              run: |
                    echo "Waiting for the application to be ready..."
                    for i in {1..10}; do
                       sleep 3
                       docker ps | grep solar-system && echo "Application is running!" && break
                       echo "Retrying... ($i/10)"
                    done
  
            
  
            - name: Perform Health Checks
              run: |
                      echo "Performing health checks on solar-system container..."    
                      curl -X GET http://localhost:3000/live || (echo "Health check failed!" && exit 1)
                      curl -X GET http://localhost:3000/ready || (echo "Readiness check failed!" && exit 1)
                      curl -X GET http://localhost:3000/os || (echo "OS endpoint check failed!" && exit 1)
    ghcr-login:
      name: ghcr-login
      needs: [Docker]
      permissions:
        contents: write
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
        - name: ghcr-login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Push Docker Image to GHCR
          uses: docker/build-push-action@v4
          with:
            context: .
            file: Dockerfile
            push: true
            tags: |
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
    Dev-Deploy:
      name: deploy-to dev cluster
      needs: [Docker]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
        - name: Install Kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        - name: Adding Context to kubectl
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
            role-skip-session-tagging: true
              
        - name: fetch dev cluster details
          run: |
            echo "Fetching dev cluster details..."
            kubectl version
            echo "------------"
            kubectl get nodes -o wide
            echo "------------"
            kubectl get svc
            echo "------------"
            kubectl get pods -o wide
        - name: Create Namespace
          run: |
            kubectl create namespace ${{ vars.NAMESPACE }}
          
        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: '[ "solar-system/kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            REPLICAS: ${{ vars.REPLICAS }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        - name: Check Manifest Files
          run: |
            cat solar-system/kubernetes/development/*.yaml

        - name: Create MongoDB Secret
          run: |
              kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=${{ inputs.mongodb-uri }} \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USER }} \
              --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASS }} \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -
        - name: Deploy to Dev Env
          run: |
              kubectl apply -f ${{ inputs.k8s-manifest-dir }}
        
        
       
            

